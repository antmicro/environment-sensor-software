name: "test"

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  validate-formatting:
    name: "Validate formatting"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install dependencies
        run: |
         sudo apt -qy update > /dev/null 2> /dev/null
         sudo apt -qy install git > /dev/null 2> /dev/null
         wget https://apt.llvm.org/llvm.sh # currently ubuntu-latest is 22.04 with only clang-14
         chmod +x llvm.sh
         sudo ./llvm.sh 16 all
         rm ./llvm.sh
      - name: Check formatting
        run: |
          cd firmware
          find src/ -iname '*.h' -o -iname '*.cpp' | xargs clang-format-16 -i --style=file:.clang-format
          echo "$(git status --porcelain)"
          $([ -z "$(git status --porcelain)" ]);

  build-firmware:
    name: "Build firmware"
    runs-on: ubuntu-latest
    container: zephyrprojectrtos/ci:v0.26.5
    env:
      CMAKE_PREFIX_PATH: /opt/toolchains
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Build
        run: |
          cd firmware
          west init -l .
          west update
          west build -b nucleo_g474re
      - name: "Upload artifacts"
        uses: actions/upload-artifact@v3
        with:
          name: firmware
          path: |
            firmware/build/zephyr/zephyr.bin
            firmware/build/zephyr/zephyr.elf
            firmware/build/zephyr/zephyr.hex
            firmware/build/zephyr/zephyr.lst
            firmware/build/zephyr/zephyr.map

  test-firmware:
    name: "Test firmware"
    runs-on: ubuntu-latest
    needs: [build-firmware]
    steps: 
      - name: Checkout code
        uses: actions/checkout@v2
      - name: download firmware artifact
        uses: actions/download-artifact@v3
        with:
          name: firmware
      - name: Prepare environment
        run: |
          sudo apt -qy update > /dev/null 2> /dev/null
          sudo apt -qy install python3-dev git gcc pipx python3-venv > /dev/null 2> /dev/null
          pipx install git+https://github.com/antmicro/renode-run
          renode-run download
          cd firmware
          python3 -m venv renode-test
          source renode-test/bin/activate
          pip3 install -r ~/.config/renode/renode-run.download/renode_*_portable/tests/requirements.txt
          pip3 install pyserial
          mkdir -p build/zephyr
          cp ../zephyr.elf build/zephyr/zephyr.elf
      - name: Run tests
        run: |
          cd firmware
          renode-run test --venv renode-test -- tests/simple_tests.robot
          renode-run test --venv renode-test -- tests/complex_tests.robot

  test-monitor:
    name: "Test monitor"
    runs-on: ubuntu-latest
    needs: [build-firmware]
    steps: 
      - name: Checkout code
        uses: actions/checkout@v2
      - name: download firmware artifact
        uses: actions/download-artifact@v3
        with:
          name: firmware
      - name: Prepare environment
        run: |
          sudo apt -qy update > /dev/null 2> /dev/null
          sudo apt -qy install python3-dev git gcc pipx python3-venv > /dev/null 2> /dev/null
          pipx install git+https://github.com/antmicro/renode-run
          renode-run download
          cd monitor
          python3 -m venv renode-test
          source renode-test/bin/activate
          pip3 install -r ~/.config/renode/renode-run.download/renode_*_portable/tests/requirements.txt
          pip3 install -r requirements.txt
          mkdir -p ../firmware/build/zephyr
          cp ../zephyr.elf ../firmware/build/zephyr/zephyr.elf
          sudo ln -s /tmp/ttyUSB0 /dev/ttyUSB0
          sudo ln -s /tmp/ttyUSB1 /dev/ttyUSB1
          sudo ln -s /tmp/ttyUSB2 /dev/ttyUSB2
      - name: Run tests
        run: |
          cd monitor/tests
          sudo env "PATH=$PATH" renode-run test --venv ../renode-test -- multinode.robot
